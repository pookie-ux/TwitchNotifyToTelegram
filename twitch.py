import time
import requests
import json
import os
import sys

if os.path.isfile(os.path.join('settings.json')): # Checking if settings file existing
    with open('settings.json') as file:
        settings = json.load(file)
else:
    print('Settings file doesn`t exist, creating...') # Creating a settings file if there is none
    with open('settings.json', 'w', encoding="utf-8") as f:
        file = {
  "client_id": "YOUR_CLIENT_ID",
  "client_secret": "YOUR_CLIENT_SECRET",
  "API_TOKEN": "YOUR_BOT_TOKEN",
  "channel_id": "YOUR_CHANNEL_ID",
  "streamer": "STREAMER_NAME",
  "token": "YOUR_OAUTH_TOKEN"
}
        json.dump(file, f, indent=4)
        sys.exit()

if settings['token'] == 'YOUR_OAUTH_TOKEN': # Checking twitch token for validity
    print('Generating new OAuth token')
    os.system('oauth_token.py')
else:
    pass
    
is_online = 0 # Do NOT change this var
stream_over = False # If you want to send a post about the end of the stream, set True
delete_post = False # If you want to delete notification post after the end of the stream, set True
message_id = None # Do NOT change this var

client_id = settings['client_id'] # Twitch client id which one you can grab from dev.twitch.tv
client_secret = settings['client_secret'] # Twitch client secret which one you can grab from dev.twitch.tv
token = settings['token'] # Twitch OAuth token which has been generated by oauth_token.py

API_TOKEN = settings['API_TOKEN'] # Telegram OAuth token which one you can grab from @BotFather
channel_id = settings['channel_id'] # Telegram channel id which one you can grab from @getmyid_bot by forwarding a message from channel

streamer = settings['streamer'] # Twitch streamer name

twitchapiurl = f'https://api.twitch.tv/helix/streams?user_login={streamer}'
twitchheaders = {
    'Client-ID': client_id,
    'Authorization': f'Bearer {token}'
}

def notification():  # function that sends notify in telegram channel;
    text = f'{streamer} is now live!\n<b>Title:</b> <code>{title}</code>\n<b>Category:</b> <code>{category}</code>\nhttps://twitch.tv/{streamer}'
    telegramurl = f'https://api.telegram.org/bot{API_TOKEN}/sendMessage'
    keyboard = {
        "inline_keyboard": [
            [
                {"text": "Watch stream", "url": f"https://twitch.tv/{streamer}"}
            ]
        ]
    }
    payload = {
        "chat_id": channel_id,
        "text": text,
        "parse_mode": "HTML",
        "reply_markup": json.dumps(keyboard),
        "disable_web_page_preview": True
    }
    response = requests.post(telegramurl, data=payload)
    result = response.json()
    global message_id
    message_id = result['result']['message_id']

while True: # main
    response = requests.get(twitchapiurl, headers=twitchheaders)
    data = json.loads(response.text)
    print(data)
    if 'message' in data:
        if data['message'] == 'Invalid OAuth token': # If OAuth token is invalid generating another one
            os.system('oauth_token.py')
            python = sys.executable
            os.execl(python, python, *sys.argv)
    else:
        pass
    if data['data']:
        if is_online != 1:
            print("Sending notify to your channel and go to sleep at 10 hours")
            title = data['data'][0]['title'] # Getting title of stream
            category = data['data'][0]['game_name'] # Getting category of stream
            notification()
            is_online = 1
            start_time = time.time()
        else:
            while is_online == 1:
                response = requests.get(twitchapiurl, headers=twitchheaders)
                data = json.loads(response.text)
                print(data)
                print(f'{streamer} still online.')
                if not data['data']:
                    end_time = time.time()
                    elapsed_time = end_time - start_time
                    hours, rem = divmod(elapsed_time, 3600)
                    minutes, seconds = divmod(rem, 60)
                    is_online = 0
                    if stream_over == True:
                        text = f'{streamer} is offline!\n<b>Title was:</b> <code>{title}</code>\n<b>Category was:</b> <code>{category}</code>\nStream lasted for {int(hours)}h {int(minutes)}m {int(seconds)}s\n\nhttps://twitch.tv/{streamer}'
                        telegramurl = f'https://api.telegram.org/bot{API_TOKEN}/sendMessage'
                        payload = {
                            "chat_id": channel_id,
                            "text": text,
                            "parse_mode": "HTML",
                            "disable_web_page_preview": True
                        }
                        requests.post(telegramurl, data=payload)
                    if delete_post == True:
                            try:
                                telegramurl = f'https://api.telegram.org/bot{API_TOKEN}/deleteMessage'
                                payload = {
                                    "chat_id": channel_id,
                                    "message_id": message_id
                                }
                                response = requests.post(telegramurl, data=payload)
                            except:
                                print(f'something went wrong while deleting message\n\nresponse: {response}')
                            else:
                                message_id = None
                time.sleep(3)

    else:
        is_online = 0
        print(f'{streamer} is offline! Another check after 3 seconds.')
        time.sleep(3)  # after 3 seconds code will again check if streamer live
